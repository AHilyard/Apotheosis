package shadows.apotheosis.ench.table;

import java.util.List;
import java.util.Random;

import net.minecraft.world.item.EnchantedBookItem;
import net.minecraft.world.item.ItemStack;
import net.minecraft.world.item.Items;
import net.minecraft.world.item.enchantment.EnchantmentInstance;

public interface IEnchantableItem {

	/**
	 * Handles the enchanting of an item.<br>
	 * The item becomes responsible for changing the target item, and applying the Enchantments to the item.<br>
	 * @param stack The ItemStack being enchanted.
	 * @param enchantments The enchantments being applied.
	 * @return The newly-enchanted itemstack.
	 */
	default ItemStack onEnchantment(ItemStack stack, List<EnchantmentInstance> enchantments) {
		boolean flag = stack.getItem() == Items.BOOK;
		if (flag) {
			stack = new ItemStack(Items.ENCHANTED_BOOK);
		}

		for (EnchantmentInstance inst : enchantments) {
			if (flag) {
				EnchantedBookItem.addEnchantment(stack, inst);
			} else {
				stack.enchant(inst.enchantment, inst.level);
			}
		}
		return stack;
	}

	/**
	 * Allow the Item to perform manipulations to the selected list of enchantments.<br>
	 * Note that this method must be deterministic respective to the random seed, and should always produce the same results for the same seed.<br>
	 * @param builtList The Enchantment List, as generated by {@link RealEnchantmentHelper#buildEnchantmentList}
	 * @param rand The pre-seeded random
	 * @param stack The stack being enchanted (which is not currently enchanted)
	 * @param level The table level
	 * @param quanta The quanta value
	 * @param arcana The arcana value
	 * @param treasure If treasure enchantments can be selected or not.
	 * @return The list of enchantments selected, given the context.
	 */
	default List<EnchantmentInstance> selectEnchantments(List<EnchantmentInstance> builtList, Random rand, ItemStack stack, int level, float quanta, float arcana, boolean treasure) {
		return builtList;
	}

}
